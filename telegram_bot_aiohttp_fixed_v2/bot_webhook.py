import logging
from aiohttp import web
from telegram import Update
from telegram.ext import Application, ApplicationBuilder, ContextTypes, MessageHandler, filters

from calendar_utils import add_task, get_daily_summary

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

TOKEN = "7555935793:AAH1cJk4dpJhUiyB9IwBKv3-R4rHaLOmAAo"
WEBHOOK_URL = "https://telegrambot-production-dd00.up.railway.app/webhook"

# –°–æ–∑–¥–∞–Ω–∏–µ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application: Application = ApplicationBuilder().token(TOKEN).build()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        logging.warning("‚ùó –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
        return

    text = update.message.text.strip()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if text.lower() == "—Å–≤–æ–¥–∫–∞":
        try:
            summary = get_daily_summary()
            await update.message.reply_text(summary)
        except Exception as e:
            logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏
    try:
        parts = [part.strip() for part in text.split(";")]
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        task, duration_str, date = parts

        duration = int(duration_str)
        result = add_task(task, duration, date)

        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {result.get('summary')}")
    except ValueError as ve:
        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {ve}\n–§–æ—Ä–º–∞—Ç: –∑–∞–¥–∞—á–∞; –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–º–∏–Ω); –¥–∞—Ç–∞ (YYYY-MM-DD)"
        )
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "–∑–∞–¥–∞—á–∞; –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–º–∏–Ω); –¥–∞—Ç–∞ (YYYY-MM-DD)"
        )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


# aiohttp webhook handler
async def webhook_handler(request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response(text="ok")
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –≤ webhook_handler")
        return web.Response(status=500, text="Internal Server Error")


# –ó–∞–ø—É—Å–∫ aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    await application.initialize()
    await application.bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    logging.info("‚úÖ AIOHTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

    await application.start()
    await application.wait_until_closed()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
